// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Robert Hawk",
            "email": "robert@the-hawk.us"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Healthcheck endpoint. Reports which statuses are currently\nrunning and the current API\\'s version number. If critical\nservices are running, it will return 200. If any of the\ncritical services are down, then the endpoint will return 503.",
                "summary": "Check to assure that the service is running.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.ServiceStatus"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/controllers.ServiceStatus"
                        }
                    }
                }
            }
        },
        "/sites": {
            "get": {
                "description": "Lists all blogs that are managed by this backend. Authentication is required to use this endpoint.",
                "summary": "List all blog sites managed by this backend.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Blog"
                            }
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ControllerError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ControllerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new blog site to be managed by this backend. Authentication is required to use this endpoint.",
                "summary": "Create a new blog site.",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Blog"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ControllerError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/controllers.ControllerError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ControllerError"
                        }
                    }
                }
            }
        },
        "/sites/{blog_domain}": {
            "put": {
                "description": "This endpoint is used to update the name or domain name of a managed blog. Authentication is required.",
                "summary": "Edit data pertaining to a managed blog.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Blog"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ControllerError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controllers.ControllerError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/controllers.ControllerError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ControllerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Performs a hard delete on this blog and all posts belonging to this blog. Since this is a hard delete\nthis ACTION CAN NOT BE UNDONE! Requires authentication.",
                "summary": "Delete the specified blog from this backend.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Blog"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ControllerError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controllers.ControllerError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ControllerError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.ControllerError": {
            "type": "object",
            "additionalProperties": true
        },
        "controllers.ServiceStatus": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.Blog": {
            "type": "object",
            "properties": {
                "domain": {
                    "description": "Domain is the domain name where this blog lives on the internet.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the title of the blog.",
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1.0+0",
	Host:        "https://the-hawk.us",
	BasePath:    "/apis/blogs/v1",
	Schemes:     []string{},
	Title:       "THUS Blogs Backend",
	Description: "UPDATE DESCRIPTION FIELD",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
